diff --git a/.htaccess b/.htaccess
new file mode 100644
index 0000000..2c73686
--- /dev/null
+++ b/.htaccess
@@ -0,0 +1 @@
+Deny from All
\ No newline at end of file
diff --git a/cert/saml.crt b/cert/saml.crt
new file mode 100644
index 0000000..ce5555a
--- /dev/null
+++ b/cert/saml.crt
@@ -0,0 +1,28 @@
+-----BEGIN CERTIFICATE-----
+MIIExDCCA6ygAwIBAgIJAMMl9jgiWgdPMA0GCSqGSIb3DQEBBQUAMIGcMQswCQYD
+VQQGEwJDWjEOMAwGA1UECBMFQ3plY2gxEjAQBgNVBAcTCVBhcmR1YmljZTEgMB4G
+A1UEChMXVW5pdmVyc2l0eSBvZiBQYXJkdWJpY2UxCzAJBgNVBAsTAklDMRQwEgYD
+VQQDEwt0dWwudXBjZS5jejEkMCIGCSqGSIb3DQEJARYVbHVrYXMuc2xhbnNreUB1
+cGNlLmN6MB4XDTEyMTExMjE0MjEwMFoXDTIyMTExMjE0MjEwMFowgZwxCzAJBgNV
+BAYTAkNaMQ4wDAYDVQQIEwVDemVjaDESMBAGA1UEBxMJUGFyZHViaWNlMSAwHgYD
+VQQKExdVbml2ZXJzaXR5IG9mIFBhcmR1YmljZTELMAkGA1UECxMCSUMxFDASBgNV
+BAMTC3R1bC51cGNlLmN6MSQwIgYJKoZIhvcNAQkBFhVsdWthcy5zbGFuc2t5QHVw
+Y2UuY3owggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC7MDYTgSWPNOKj
++D1OCfM+JGbIJll/r1KWNgV0Z1fPC9QYwCiRwN11Dh6/AjxKahVxYBUGdh+3G2G5
+Vh5h0eVbeJxZmeqx4sgGi0LnYZrAH2v38/JtAIHPQSfalh1H6ZNqak202SLQbfia
+yo1qeYVWVloXlIC1B6UsGPIwazi+Ptxp3DeL9rSiQW/WVbSPyVMyz4yXBTSpPvEL
+fzKJbi2oAbP2uqtRk1a+qFKHTv+xZPqZTzGerRhqyJEXRQ8ZwpkufU3DGFyiO4MR
+YwBgCRwGoebT9yRh8UurKzag9Hbdn1fwkYKC2T3y5W4ULJlWPcwHoGFTol2xglj9
+tRKjhguJAgMBAAGjggEFMIIBATAdBgNVHQ4EFgQUMZ+zowwd5NGF+oYb/+P37E3/
+dtQwgdEGA1UdIwSByTCBxoAUMZ+zowwd5NGF+oYb/+P37E3/dtShgaKkgZ8wgZwx
+CzAJBgNVBAYTAkNaMQ4wDAYDVQQIEwVDemVjaDESMBAGA1UEBxMJUGFyZHViaWNl
+MSAwHgYDVQQKExdVbml2ZXJzaXR5IG9mIFBhcmR1YmljZTELMAkGA1UECxMCSUMx
+FDASBgNVBAMTC3R1bC51cGNlLmN6MSQwIgYJKoZIhvcNAQkBFhVsdWthcy5zbGFu
+c2t5QHVwY2UuY3qCCQDDJfY4IloHTzAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEB
+BQUAA4IBAQBbPmjc7jU7YzQTXzDOQORlf+VreaSXTed3UWsi+g0mpVCD1OCp1/yA
+8DDm5VNycYcrnfgmLXevH1FKga//j9c1dGMDRXLzHnO3YVjeHDxXhgEflR+dvahA
+bOoRLqtqWKc+dltPztS/8lG9ijeyNWt/Rq79Hkw18gtwZS3fErFRbvPLq+7BY3MM
+RVLpfK8voFKA0rR9NadViFRxcE34lagoHRmKj1WNcTIbfbjqZgt/q3TXX5PwdeWd
+AjgqwdKIwigZCO9lTQATRZa1w/nsElDsHxKylUs67f5KrjSpl+EP+jDnb3RWSi5R
+JOUJRAVZvoZBqi2YPwumEBxufXNUCsz4
+-----END CERTIFICATE-----
diff --git a/cert/saml.pem b/cert/saml.pem
new file mode 100644
index 0000000..e9dfcf7
--- /dev/null
+++ b/cert/saml.pem
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEowIBAAKCAQEAuzA2E4EljzTio/g9TgnzPiRmyCZZf69SljYFdGdXzwvUGMAo
+kcDddQ4evwI8SmoVcWAVBnYftxthuVYeYdHlW3icWZnqseLIBotC52GawB9r9/Py
+bQCBz0En2pYdR+mTampNtNki0G34msqNanmFVlZaF5SAtQelLBjyMGs4vj7cadw3
+i/a0okFv1lW0j8lTMs+MlwU0qT7xC38yiW4tqAGz9rqrUZNWvqhSh07/sWT6mU8x
+nq0YasiRF0UPGcKZLn1NwxhcojuDEWMAYAkcBqHm0/ckYfFLqys2oPR23Z9X8JGC
+gtk98uVuFCyZVj3MB6BhU6JdsYJY/bUSo4YLiQIDAQABAoIBAQCiRr5qlEhqaO+e
+NMN41vlvwwDzvQNTxTs0i6qY6kpebSO3PUcubGPQaahP8PExldv3CNPRYTBHfk5u
+7PCz3tIWRW5N4zhqdG7x9WLP0nbk3ZitQWfGBW2DrjmNrxu9TwoEdBnfkWo0BVJD
+ZxvH1Ye5fGzoCk62IeWYYBv9y8ZKbhkeP0oihixuv7RCkkexaPQcHJgXBeDypYNU
+kqtiIF2wdGt6WGH2mU6C3iOnF64mLMAa4vibcl6GiZI33o3R7MGXCZy6WBRTm81t
+Vm0Izdleeh2GHDbtaT9iz952nddTRnus2Hq4M0sO5jWSOFOX25Gwp7mASAellPuJ
+sBeIfeAxAoGBAPG0iVpX7HIn71ek22uq5kbgB7SK4N42xPzvZbPOzUjeicjQK8Ey
+7szLlnYB0Xu2vcPeVIVPbEVwAUZTqatrhKnP1LjwF1CVAnkqcBWl/EdaYmp2SPti
+rvsU+UackDkiYhWbre5dMkE/Vd4FcMDPjf/SgiAVGrkOO41WcPRdnCO1AoGBAMZC
+R0ceYjELhpHSsKx3P2JcwOCBsyRMls8jjDpN1x9ZsPaD86Hos7NYDndWRHhpylzY
+1tFa1Vd3MZKboKmhv8X63KuIr3hYwiIycxoq96FDnGRYHwuLRep3PkOrrdFFP/ny
+tvtS0sq2bghVuCyj+oCTZGtWgMtnRO8e1J60jZUFAoGADHGM+Le6Fo5zxgFYwoxD
+2rZB70uPFCGhtpvkkoM9EllSoqIE/qdOoACDOIQTctkPn/vcQhi6rEB98E7yVz7r
+z4pBm1vQ93cUb4R9zL+E42+FzZFVZIvKEmccBkSdMDPS9OXU6IanxbArDYkeKu8E
+kn0V8ezkOU7ARiCDJDGFjlkCgYB+sjJMr4z+XKg1nhfLTzVRTYbwsdHiW5Nwcf4V
+8FKONUoSb0aNbGESNi6gcp+0954bcXLuPQbjK0ehshSc8sHT6jmE4QeJd+cv5V+L
+FHRFOSjDM1E7llgquuMuaZLdjkyRFVt8BnSwmJ5+cxEMbgoSip58vb32vlreGKy1
+cxqbZQKBgEPIxyHkCKUDIJFCOmJfaWgK/ZeP7BTqcB9gcQ2L4bQ1Q3qpMPo6V3Ea
+wLE5NehjtpwOBHtf36ZOi9BMkcQpg7l9GadF5AOhU109Q6GjSzItgLgyaB4+oopH
+NNqLUiYYsov/VlyuZum4U57Aok6j1tgqNe+TZbja5zke5VZF3f07
+-----END RSA PRIVATE KEY-----
diff --git a/config/acl.php b/config/acl.php
new file mode 100644
index 0000000..ce901ce
--- /dev/null
+++ b/config/acl.php
@@ -0,0 +1,61 @@
+<?php
+
+/*
+ * This file defines "named" access control lists, which can
+ * be reused in several places.
+ */
+$config = array(
+
+	'adminlist' => array(
+		//array('allow', 'equals', 'mail', 'admin1@example.org'),
+		//array('allow', 'has', 'groups', 'admin'),
+		/* The default action is to deny access. */
+	),
+
+	'example-simple' => array(
+		array('allow', 'equals', 'mail', 'admin1@example.org'),
+		array('allow', 'equals', 'mail', 'admin2@example.org'),
+		/* The default action is to deny access. */
+	),
+
+	'example-deny-some' => array(
+		array('deny', 'equals', 'mail', 'eviluser@example.org'),
+		array('allow'), /* Allow everybody else. */
+	),
+
+	'example-maildomain' => array(
+		array('allow', 'equals-preg', 'mail', '/@example\.org$/'),
+		/* The default action is to deny access. */
+	),
+
+	'example-allow-employees' => array(
+		array('allow', 'has', 'eduPersonAffiliation', 'employee'),
+		/* The default action is to deny access. */
+	),
+
+	'example-allow-employees-not-students' => array(
+		array('deny', 'has', 'eduPersonAffiliation', 'student'),
+		array('allow', 'has', 'eduPersonAffiliation', 'employee'),
+		/* The default action is to deny access. */
+	),
+
+	'example-deny-student-except-one' => array(
+		array('deny', 'and',
+			array('has', 'eduPersonAffiliation', 'student'),
+			array('not', 'equals', 'mail', 'user@example.org'),
+		),
+		array('allow'),
+	),
+
+	'example-allow-or' => array(
+		array('allow', 'or',
+			array('equals', 'eduPersonAffiliation', 'student', 'member'),
+			array('equals', 'mail', 'someuser@example2.org'),
+		),
+	),
+
+	'example-allow-all' => array(
+		array('allow'),
+	),
+
+);
\ No newline at end of file
diff --git a/config/authmemcookie.php b/config/authmemcookie.php
new file mode 100644
index 0000000..036e8c2
--- /dev/null
+++ b/config/authmemcookie.php
@@ -0,0 +1,86 @@
+<?php
+
+/**
+ * This is the configuration file for the Auth MemCookie example.
+ */
+
+$config = array(
+
+	/*
+	 * What type of login Auth MemCookie will use.
+	 * Can be either 'authsource', 'saml2' or 'shib13'.
+	 *
+	 * For backwards compatibility, the default value if unset is 'saml2'.
+	 * New installations should use 'authsource'.
+	 */
+	'loginmethod' => 'authsource',
+
+	/*
+	 * The authentication source that should be used.
+	 *
+	 * This must be one of the authentication sources configured in config/authsources.php.
+	 */
+	'authsource' => 'default-sp',
+
+	/*
+	 * This is the name of the cookie we should save the session id in. The value of this option must match the
+	 * Auth_memCookie_CookieName option in the Auth MemCookie configuration. The default value is 'AuthMemCookie'.
+	 *
+	 * Default:
+	 *  'cookiename' => 'AuthMemCookie',
+	 */
+	'cookiename' => 'AuthMemCookie',
+
+	/*
+	 * This option specifies the name of the attribute which contains the username of the user. It must be set to
+	 * a valid attribute name.
+	 *
+	 * Examples:
+	 *  'username' => 'uid', // LDAP attribute for user id.
+	 *  'username' => 'mail', // LDAP attribute for email address.
+	 *
+	 * Default:
+	 *  No default value.
+	 */
+	'username' => NULL,
+
+	/*
+	 * This option specifies the name of the attribute which contains the groups of the user. Set this option to
+	 * NULL if you don't want to include any groups.
+	 *
+	 * Example:
+	 *  'groups' => 'edupersonaffiliation',
+	 *
+	 * Default:
+	 *  'groups' => NULL,
+	 */
+	'groups' => NULL,
+
+	/*
+	 * This option contains the hostnames or IP addresses of the memcache servers where we should store the
+	 * authentication information. Separator is a comma. This option should match the address part of the
+	 * Auth_memCookie_Memcached_AddrPort option in the Auth MemCookie configuration.
+	 *
+	 * Examples:
+	 *  'memcache.host' => '192.168.93.52',
+	 *  'memcache.host' => 'memcache.example.org',
+	 *  'memcache.host' => 'memcache1.example.org,memcache2.example.org'
+	 *
+	 * Default:
+	 *  'memcache.host' => '127.0.0.1',
+	 */
+	'memcache.host' => '127.0.0.1',
+
+	/*
+	 * This option contains the port number of the memcache server where we should store the
+	 * authentication information. This option should match the port part of the
+	 * Auth_memCookie_Memcached_AddrPort option in the Auth MemCookie configuration.
+	 *
+	 * Default:
+	 *  'memcache.port' => 11211,
+	 */
+	'memcache.port' => 11211,
+
+);
+
+?>
\ No newline at end of file
diff --git a/config/authsources.php b/config/authsources.php
new file mode 100644
index 0000000..0b033cf
--- /dev/null
+++ b/config/authsources.php
@@ -0,0 +1,349 @@
+<?php
+
+$config = array(
+
+	// This is a authentication source which handles admin authentication.
+	'admin' => array(
+		// The default is to use core:AdminPassword, but it can be replaced with
+		// any authentication source.
+
+		'core:AdminPassword',
+	),
+
+
+	// An authentication source which can authenticate against both SAML 2.0
+	// and Shibboleth 1.3 IdPs.
+	'default-sp' => array(
+		'saml:SP',
+
+		// The entity ID of this SP.
+		// Can be NULL/unset, in which case an entity ID is generated based on the metadata URL.
+		'entityID' => 'http://tul.upce.cz/',
+
+		// The entity ID of the IdP this should SP should contact.
+		// Can be NULL/unset, in which case the user will be shown a list of available IdPs.
+		'idp' => NULL,
+
+		// The URL to the discovery service.
+		// Can be NULL/unset, in which case a builtin discovery service will be used.
+//		'discoURL' => 'https://www.eduid.cz/wayf/',
+    'privatekey' => 'saml.pem',
+    'certificate' => 'saml.crt',
+	),
+
+
+	/*
+	'example-sql' => array(
+		'sqlauth:SQL',
+		'dsn' => 'pgsql:host=sql.example.org;port=5432;dbname=simplesaml',
+		'username' => 'simplesaml',
+		'password' => 'secretpassword',
+		'query' => 'SELECT "username", "name", "email" FROM "users" WHERE "username" = :username AND "password" = :password',
+	),
+	*/
+
+	/*
+	'example-static' => array(
+		'exampleauth:Static',
+		'uid' => array('testuser'),
+		'eduPersonAffiliation' => array('member', 'employee'),
+		'cn' => array('Test User'),
+	),
+	*/
+
+	/*
+	'example-userpass' => array(
+		'exampleauth:UserPass',
+
+		// Give the user an option to save their username for future login attempts
+		// And when enabled, what should the default be, to save the username or not
+		//'remember.username.enabled' => FALSE,
+		//'remember.username.checked' => FALSE,
+
+		'student:studentpass' => array(
+			'uid' => array('test'),
+			'eduPersonAffiliation' => array('member', 'student'),
+		),
+		'employee:employeepass' => array(
+			'uid' => array('employee'),
+			'eduPersonAffiliation' => array('member', 'employee'),
+		),
+	),
+	*/
+
+	/*
+	'crypto-hash' => array(
+		'authcrypt:Hash',
+		// hashed version of 'verysecret', made with bin/pwgen.php
+		'professor:{SSHA256}P6FDTEEIY2EnER9a6P2GwHhI5JDrwBgjQ913oVQjBngmCtrNBUMowA==' => array(
+			'uid' => array('prof_a'),
+			'eduPersonAffiliation' => array('member', 'employee', 'board'),
+		),
+	),
+	*/
+
+	/*
+	'htpasswd' => array(
+		'authcrypt:Htpasswd',
+		'htpasswd_file' => '/var/www/foo.edu/legacy_app/.htpasswd',
+		'static_attributes' => array(
+			'eduPersonAffiliation' => array('member', 'employee'),
+			'Organization' => array('University of Foo'),
+		),
+	),
+	*/
+
+	/*
+	// This authentication source serves as an example of integration with an
+	// external authentication engine. Take a look at the comment in the beginning
+	// of modules/exampleauth/lib/Auth/Source/External.php for a description of
+	// how to adjust it to your own site.
+	'example-external' => array(
+		'exampleauth:External',
+	),
+	*/
+
+	/*
+	'yubikey' => array(
+		'authYubiKey:YubiKey',
+ 		'id' => '000',
+		// 'key' => '012345678',
+	),
+	*/
+
+	/*
+	'openid' => array(
+		'openid:OpenIDConsumer',
+		'attributes.required' => array('nickname'),
+		'attributes.optional' => array('fullname', 'email',),
+		// 'sreg.validate' => FALSE,
+		'attributes.ax_required' => array('http://axschema.org/namePerson/friendly'),
+		'attributes.ax_optional' => array('http://axschema.org/namePerson','http://axschema.org/contact/email'),
+		// Prefer HTTP redirect over POST
+		// 'prefer_http_redirect' => FALSE,
+	),
+	*/
+
+	/*
+	// Example of an authsource that authenticates against Google.
+	// See: http://code.google.com/apis/accounts/docs/OpenID.html
+	'google' => array(
+		'openid:OpenIDConsumer',
+		// Googles OpenID endpoint.
+		'target' => 'https://www.google.com/accounts/o8/id',
+		// Custom realm
+		// 'realm' => 'http://*.example.org',
+		// Attributes that google can supply.
+		'attributes.ax_required' => array(
+			//'http://axschema.org/namePerson/first',
+			//'http://axschema.org/namePerson/last',
+			//'http://axschema.org/contact/email',
+			//'http://axschema.org/contact/country/home',
+			//'http://axschema.org/pref/language',
+		),
+		// custom extension arguments
+		'extension.args' => array(
+			//'http://specs.openid.net/extensions/ui/1.0' => array(
+			//	'mode' => 'popup',
+			//	'icon' => 'true',
+			//),
+		),
+	),
+	*/
+
+	/*
+	'papi' => array(
+		'authpapi:PAPI',
+	),
+	*/
+
+
+	/*
+	'facebook' => array(
+		'authfacebook:Facebook',
+		// Register your Facebook application on http://www.facebook.com/developers
+		// App ID or API key (requests with App ID should be faster; https://github.com/facebook/php-sdk/issues/214)
+		'api_key' => 'xxxxxxxxxxxxxxxx',
+		// App Secret
+		'secret' => 'xxxxxxxxxxxxxxxx',
+		// which additional data permissions to request from user
+		// see http://developers.facebook.com/docs/authentication/permissions/ for the full list
+		// 'req_perms' => 'email,user_birthday',
+	),
+	*/
+
+	/*
+	// LinkedIn OAuth Authentication API.
+	// Register your application to get an API key here:
+	//  https://www.linkedin.com/secure/developer
+	'linkedin' => array(
+		'authlinkedin:LinkedIn',
+		'key' => 'xxxxxxxxxxxxxxxx',
+		'secret' => 'xxxxxxxxxxxxxxxx',
+	),
+	*/
+
+	/*
+	// Twitter OAuth Authentication API.
+	// Register your application to get an API key here:
+	//  http://twitter.com/oauth_clients
+	'twitter' => array(
+		'authtwitter:Twitter',
+		'key' => 'xxxxxxxxxxxxxxxx',
+		'secret' => 'xxxxxxxxxxxxxxxx',
+	),
+	*/
+
+	/*
+	// MySpace OAuth Authentication API.
+	// Register your application to get an API key here:
+	//  http://developer.myspace.com/
+	'myspace' => array(
+		'authmyspace:MySpace',
+		'key' => 'xxxxxxxxxxxxxxxx',
+		'secret' => 'xxxxxxxxxxxxxxxx',
+	),
+	*/
+
+	/*
+	// Windows Live ID Authentication API.
+	// Register your application to get an API key here:
+	//  https://manage.dev.live.com
+	'windowslive' => array(
+		'authwindowslive:LiveID',
+		'key' => 'xxxxxxxxxxxxxxxx',
+		'secret' => 'xxxxxxxxxxxxxxxx',
+	),
+	*/
+
+	/*
+	// Example of a LDAP authentication source.
+	'example-ldap' => array(
+		'ldap:LDAP',
+
+		// Give the user an option to save their username for future login attempts
+		// And when enabled, what should the default be, to save the username or not
+		//'remember.username.enabled' => FALSE,
+		//'remember.username.checked' => FALSE,
+
+		// The hostname of the LDAP server.
+		'hostname' => 'ldap.example.org',
+
+		// Whether SSL/TLS should be used when contacting the LDAP server.
+		'enable_tls' => FALSE,
+
+		// Whether debug output from the LDAP library should be enabled.
+		// Default is FALSE.
+		'debug' => FALSE,
+
+		// The timeout for accessing the LDAP server, in seconds.
+		// The default is 0, which means no timeout.
+		'timeout' => 0,
+
+		// Which attributes should be retrieved from the LDAP server.
+		// This can be an array of attribute names, or NULL, in which case
+		// all attributes are fetched.
+		'attributes' => NULL,
+
+		// The pattern which should be used to create the users DN given the username.
+		// %username% in this pattern will be replaced with the users username.
+		//
+		// This option is not used if the search.enable option is set to TRUE.
+		'dnpattern' => 'uid=%username%,ou=people,dc=example,dc=org',
+
+		// As an alternative to specifying a pattern for the users DN, it is possible to
+		// search for the username in a set of attributes. This is enabled by this option.
+		'search.enable' => FALSE,
+
+		// The DN which will be used as a base for the search.
+		// This can be a single string, in which case only that DN is searched, or an
+		// array of strings, in which case they will be searched in the order given.
+		'search.base' => 'ou=people,dc=example,dc=org',
+
+		// The attribute(s) the username should match against.
+		//
+		// This is an array with one or more attribute names. Any of the attributes in
+		// the array may match the value the username.
+		'search.attributes' => array('uid', 'mail'),
+
+		// The username & password the simpleSAMLphp should bind to before searching. If
+		// this is left as NULL, no bind will be performed before searching.
+		'search.username' => NULL,
+		'search.password' => NULL,
+
+		// If the directory uses privilege separation,
+		// the authenticated user may not be able to retrieve
+		// all required attribures, a privileged entity is required
+		// to get them. This is enabled with this option.
+		'priv.read' => FALSE,
+
+		// The DN & password the simpleSAMLphp should bind to before
+		// retrieving attributes. These options are required if
+		// 'priv.read' is set to TRUE.
+		'priv.username' => NULL,
+		'priv.password' => NULL,
+
+	),
+	*/
+
+	/*
+	// Example of an LDAPMulti authentication source.
+	'example-ldapmulti' => array(
+		'ldap:LDAPMulti',
+
+		// Give the user an option to save their username for future login attempts
+		// And when enabled, what should the default be, to save the username or not
+		//'remember.username.enabled' => FALSE,
+		//'remember.username.checked' => FALSE,
+
+		// The way the organization as part of the username should be handled.
+		// Three possible values:
+		// - 'none':   No handling of the organization. Allows '@' to be part
+		//             of the username.
+		// - 'allow':  Will allow users to type 'username@organization'.
+		// - 'force':  Force users to type 'username@organization'. The dropdown
+		//             list will be hidden.
+		//
+		// The default is 'none'.
+		'username_organization_method' => 'none',
+
+		// Whether the organization should be included as part of the username
+		// when authenticating. If this is set to TRUE, the username will be on
+		// the form <username>@<organization identifier>. If this is FALSE, the
+		// username will be used as the user enters it.
+		//
+		// The default is FALSE.
+		'include_organization_in_username' => FALSE,
+
+		// A list of available LDAP servers.
+		//
+		// The index is an identifier for the organization/group. When
+		// 'username_organization_method' is set to something other than 'none',
+		// the organization-part of the username is matched against the index.
+		//
+		// The value of each element is an array in the same format as an LDAP
+		// authentication source.
+		'employees' => array(
+			// A short name/description for this group. Will be shown in a dropdown list
+			// when the user logs on.
+			//
+			// This option can be a string or an array with language => text mappings.
+			'description' => 'Employees',
+
+			// The rest of the options are the same as those available for
+			// the LDAP authentication source.
+			'hostname' => 'ldap.employees.example.org',
+			'dnpattern' => 'uid=%username%,ou=employees,dc=example,dc=org',
+		),
+
+		'students' => array(
+			'description' => 'Students',
+
+			'hostname' => 'ldap.students.example.org',
+			'dnpattern' => 'uid=%username%,ou=students,dc=example,dc=org',
+		),
+
+	),
+	*/
+
+);
diff --git a/config/cas-ldap.php b/config/cas-ldap.php
new file mode 100644
index 0000000..0eba48a
--- /dev/null
+++ b/config/cas-ldap.php
@@ -0,0 +1,39 @@
+<?php
+/* 
+ * The configuration of simpleSAMLphp
+ * 
+ * 
+ */
+
+$casldapconfig = array (
+	'idpentityid.example.org' => array(
+		'cas' => array(
+			'login' => 'https://idpentityid.example.org/cas/login',
+			'validate' => 'https://idpentityid.example.org/cas/validate',
+		),
+		'ldap' => array(
+			'servers' => 'idpentityid.example.org',
+			'enable_tls' => false,
+			'searchbase' => 'dc=example,dc=org',
+			'searchattributes' => 'uid',
+			'attributes' => array('cn', 'mail'),
+		),
+	),
+	'idpentityid2.example.org' => array(
+		'cas' => array(
+			'login' => 'https://idpentityid2.example.org/login',
+			'validate' => 'https://idpentityid2.example.org/validate',
+		),
+		'ldap' => array(
+			'servers' => 'ldap://idpentityid2.example.org',
+			'enable_tls' => false,
+			'searchbase' => 'ou=users,dc=example,dc=org',
+			'searchattributes' => array('uid', 'mail'), # array for being able to login with either uid or mail.
+			'attributes' => null,
+			'priv_user_dn' => 'uid=admin,ou=users,dc=example,dc=org',
+			'priv_user_pw' => 'xxxxx',
+		),
+	),
+
+);
+?>
\ No newline at end of file
diff --git a/config/config-login-auto.php b/config/config-login-auto.php
new file mode 100644
index 0000000..2fd0741
--- /dev/null
+++ b/config/config-login-auto.php
@@ -0,0 +1,68 @@
+<?php
+/* 
+ * The configuration of the login-auto authentication module.
+ * 
+ * $Id: config.php 451 2008-03-27 15:33:34Z olavmrk $
+ */
+
+$config = array (
+
+	/*
+	 * This option enables or disables the login-auto authentication
+	 * handler. This handler is implemented in 'www/auth/login-auto.php'.
+	 *
+	 * When this option is set to true, a user can go to the
+	 * 'auth/login-auto.php' web page to be authenticated as an example
+	 * user. The user will receive the attributes set in the
+	 * 'auth.auto.attributes' option.
+	 *
+	 * WARNING: setting this option to true will make it possible to use
+	 * this authenticator for all users, irrespectively of the 'auth'
+	 * setting in the IdP's metadata. They can always use it by opening the
+	 * 'auth/login-auto.php' webpage manually.
+	 */
+	'auth.auto.enable' => true,
+
+	/*
+	 * This option configures which attributes the login-auto
+	 * authentication handler will set for the user. It is an array of
+	 * arrays. The name of the attribute is the index in the first array,
+	 * and all the values for the attribute is given in the array
+	 * referenced to by the name.
+	 *
+	 * Example:
+	 * 'auth.auto.attributes' => array(
+	 *     'edupersonaffiliation' => array('student', 'member'),
+	 *     'uid' => array('example_uid'),
+	 *     'mail' => array('example@example.com'),
+	 * ),
+	 */
+	'auth.auto.attributes' => array(
+		'edupersonaffiliation' => array('student', 'member'),
+		'title' => array('Example user title'),
+		'uid' => array('example_uid'),
+		'mail' => array('example@example.com'),
+		'cn' => array('Example user commonname'),
+		'givenname' => array('Example user givenname'),
+		'sn' => array("Example surname"),
+	),
+
+	/*
+	 * When this option is set to true, the login-auto authentication
+	 * handler will ask for a username and a password. This can be used to
+	 * test the IdP. The username and password isn't verified, and the
+	 * user/script can enter anything.
+	 */
+	'auth.auto.ask_login' => false,
+
+	/*
+	 * This option configures a delay in the login-auto authentication
+	 * handler. The script will wait for the given number of milliseconds
+	 * before authenticating the user. This can, for example, be used in
+	 * a simple simulation of a slow LDAP server.
+	 */
+	'auth.auto.delay_login' => 0,
+);
+
+
+?>
\ No newline at end of file
diff --git a/config/config-login-feide.php b/config/config-login-feide.php
new file mode 100644
index 0000000..7c437a0
--- /dev/null
+++ b/config/config-login-feide.php
@@ -0,0 +1,39 @@
+<?php
+/* 
+ * Configuration for the auth/login-feide.php login module.
+ *
+ * The configuration file is an array with multiple organizations. The user
+ * can select which organization he/she wants to log in with, with a drop-down
+ * menu in the user interface.
+ * 
+ */
+
+$config = array (
+
+	'orgldapconfig' => array(
+
+		'example1.com' => array(
+			'description' => 'Example Org 1',
+			'searchbase'  => 'cn=people,dc=example1,dc=com',
+			'hostname'    => 'ldaps://ldap.example1.com',
+			'attributes'  => null,
+			
+			'contactMail' => 'admin@example1.com',
+			'contactURL'  => 'http://admin.example1.com',
+			
+			// System user to bind() before we do a search for eduPersonPrincipalName
+			'adminUser'     => 'uid=admin,dc=example1,dc=com',
+			'adminPassword' => 'xxx',
+	
+		),
+		'example1.com' => array(
+			'description' => 'Example Org 1',
+			'searchbase'  => 'cn=people,dc=example1,dc=com',
+			'hostname'    => 'ldaps://ldap.example1.com',
+			
+			'attributes'  => array('mail', 'street'),
+		),
+	),
+);
+
+?>
diff --git a/config/config-metarefresh.php b/config/config-metarefresh.php
new file mode 100644
index 0000000..88aae86
--- /dev/null
+++ b/config/config-metarefresh.php
@@ -0,0 +1,21 @@
+<?php
+
+$config = array(
+	'sets' => array(
+		'eduid' => array(
+		    'cron'=>array('hourly'),
+		    'sources'=>array(
+          array(
+            'whitelist'=>array(
+              'https://idp.upce.cz/idp/shibboleth',
+              'https://shibbo.tul.cz/idp/shibboleth',
+            ),
+            'src'=>'https://metadata.eduid.cz/entities/eduid+idp',
+          )
+		    ),
+		    'expireAfter'=>60*60*24,
+		    'outputDir'=>'/www/tul/metadata',
+		    'outputFormat'=>'flatfile'
+		),
+	),
+);
diff --git a/config/config-sanitycheck.php b/config/config-sanitycheck.php
new file mode 100644
index 0000000..ad60747
--- /dev/null
+++ b/config/config-sanitycheck.php
@@ -0,0 +1,18 @@
+<?php
+/* 
+ * The configuration of simpleSAMLphp sanitycheck package
+ */
+
+$config = array (
+
+	/*
+	 * Do you want to generate statistics using the cron module? If so, specify which cron tag to use.
+	 * Examples: daily, weekly
+	 * To not run statistics in cron, set value to 
+	 *     'cron_tag' => NULL,
+	 */
+	'cron_tag' => 'hourly',
+
+);
+
+?>
\ No newline at end of file
diff --git a/config/config.php b/config/config.php
new file mode 100644
index 0000000..a5b7b18
--- /dev/null
+++ b/config/config.php
@@ -0,0 +1,640 @@
+<?php
+/* 
+ * The configuration of simpleSAMLphp
+ * 
+ * $Id$
+ */
+
+$config = array (
+
+	/**
+	 * Setup the following parameters to match the directory of your installation.
+	 * See the user manual for more details.
+	 *
+	 * Valid format for baseurlpath is:
+	 * [(http|https)://(hostname|fqdn)[:port]]/[path/to/simplesaml/]
+	 * (note that it must end with a '/')
+	 *
+	 * The full url format is useful if your simpleSAMLphp setup is hosted behind
+	 * a reverse proxy. In that case you can specify the external url here.
+	 *
+	 * Please note that simpleSAMLphp will then redirect all queries to the
+	 * external url, no matter where you come from (direct access or via the
+	 * reverse proxy).
+	 */
+	'baseurlpath'           => 'simplesaml/www/',
+	'certdir'               => 'cert/',
+	'loggingdir'            => '/www/tul/log-custom/',
+	'datadir'               => 'data/',
+
+	/*
+	 * A directory where simpleSAMLphp can save temporary files.
+	 *
+	 * SimpleSAMLphp will attempt to create this directory if it doesn't exist.
+	 */
+	'tempdir'               => '/www/tul/tmp/simplesaml',
+	
+
+	/*
+	 * If you enable this option, simpleSAMLphp will log all sent and received messages
+	 * to the log file.
+	 *
+	 * This option also enables logging of the messages that are encrypted and decrypted.
+	 *
+	 * Note: The messages are logged with the DEBUG log level, so you also need to set
+	 * the 'logging.level' option to LOG_DEBUG.
+	 */
+	'debug' => TRUE,
+
+
+	'showerrors'            =>	TRUE,
+
+	/**
+	 * Custom error show function called from SimpleSAML_Error_Error::show.
+	 * See docs/simplesamlphp-errorhandling.txt for function code example.
+	 *
+	 * Example:
+	 *   'errors.show_function' => array('sspmod_example_Error_Show', 'show'),
+	 */
+
+	/**
+	 * This option allows you to enable validation of XML data against its
+	 * schemas. A warning will be written to the log if validation fails.
+	 */
+	'debug.validatexml' => FALSE,
+
+	/**
+	 * This password must be kept secret, and modified from the default value 123.
+	 * This password will give access to the installation page of simpleSAMLphp with
+	 * metadata listing and diagnostics pages.
+	 * You can also put a hash here; run "bin/pwgen.php" to generate one.
+	 */
+	'auth.adminpassword'		=> '3lk1yl1sdrcubzvxbag3xu0mvarcgk1q',
+	'admin.protectindexpage'	=> false,
+	'admin.protectmetadata'		=> false,
+
+	/**
+	 * This is a secret salt used by simpleSAMLphp when it needs to generate a secure hash
+	 * of a value. It must be changed from its default value to a secret value. The value of
+	 * 'secretsalt' can be any valid string of any length.
+	 *
+	 * A possible way to generate a random salt is by running the following command from a unix shell:
+	 * tr -c -d '0123456789abcdefghijklmnopqrstuvwxyz' </dev/urandom | dd bs=32 count=1 2>/dev/null;echo
+	 */
+	'secretsalt' => '27g96w1r4loesxmw1jdgb4ryl0dbyv54',
+	
+	/*
+	 * Some information about the technical persons running this installation.
+	 * The email address will be used as the recipient address for error reports, and
+	 * also as the technical contact in generated metadata.
+	 */
+	'technicalcontact_name'     => 'Administrator',
+	'technicalcontact_email'    => 'lukas.slansky@upce.cz',
+
+	/*
+	 * The timezone of the server. This option should be set to the timezone you want
+	 * simpleSAMLphp to report the time in. The default is to guess the timezone based
+	 * on your system timezone.
+	 *
+	 * See this page for a list of valid timezones: http://php.net/manual/en/timezones.php
+	 */
+	'timezone' => 'Europe/Prague',
+
+	/*
+	 * Logging.
+	 * 
+	 * define the minimum log level to log
+	 *		SimpleSAML_Logger::ERR		No statistics, only errors
+	 *		SimpleSAML_Logger::WARNING	No statistics, only warnings/errors
+	 *		SimpleSAML_Logger::NOTICE	Statistics and errors
+	 *		SimpleSAML_Logger::INFO		Verbose logs
+	 *		SimpleSAML_Logger::DEBUG	Full debug logs - not reccomended for production
+	 * 
+	 * Choose logging handler.
+	 * 
+	 * Options: [syslog,file,errorlog]
+	 * 
+	 */
+	'logging.level'         => SimpleSAML_Logger::DEBUG,
+	'logging.handler'       => 'file',
+
+	/*
+	 * Choose which facility should be used when logging with syslog.
+	 *
+	 * These can be used for filtering the syslog output from simpleSAMLphp into its
+	 * own file by configuring the syslog daemon.
+	 *
+	 * See the documentation for openlog (http://php.net/manual/en/function.openlog.php) for available
+	 * facilities. Note that only LOG_USER is valid on windows.
+	 *
+	 * The default is to use LOG_LOCAL5 if available, and fall back to LOG_USER if not.
+	 */
+	'logging.facility' => defined('LOG_LOCAL5') ? constant('LOG_LOCAL5') : LOG_USER,
+
+	/*
+	 * The process name that should be used when logging to syslog.
+	 * The value is also written out by the other logging handlers.
+	 */
+	'logging.processname' => 'simplesamlphp',
+
+	/* Logging: file - Logfilename in the loggingdir from above.
+	 */
+	'logging.logfile'		=> 'simplesamlphp.log',
+
+	/* (New) statistics output configuration.
+	 *
+	 * This is an array of outputs. Each output has at least a 'class' option, which
+	 * selects the output.
+	 */
+	'statistics.out' => array(
+		// Log statistics to the normal log.
+		/*
+		array(
+			'class' => 'core:Log',
+			'level' => 'notice',
+		),
+		*/
+		// Log statistics to files in a directory. One file per day.
+		/*
+		array(
+			'class' => 'core:File',
+			'directory' => '/var/log/stats',
+		),
+		*/
+	),
+
+
+	/*
+	 * Enable
+	 * 
+	 * Which functionality in simpleSAMLphp do you want to enable. Normally you would enable only 
+	 * one of the functionalities below, but in some cases you could run multiple functionalities.
+	 * In example when you are setting up a federation bridge.
+	 */
+	'enable.saml20-idp'		=> false,
+	'enable.shib13-idp'		=> false,
+	'enable.adfs-idp'		=> false,
+	'enable.wsfed-sp'		=> false,
+	'enable.authmemcookie' => false,
+
+	/* 
+	 * This value is the duration of the session in seconds. Make sure that the time duration of
+	 * cookies both at the SP and the IdP exceeds this duration.
+	 */
+	'session.duration'		=>  8 * (60*60), // 8 hours.
+	'session.requestcache'	=>  4 * (60*60), // 4 hours
+
+	/*
+	 * Sets the duration, in seconds, data should be stored in the datastore. As the datastore is used for
+	 * login and logout requests, thid option will control the maximum time these operations can take.
+	 * The default is 4 hours (4*60*60) seconds, which should be more than enough for these operations.
+	 */
+	'session.datastore.timeout' => (4*60*60), // 4 hours
+	
+	/*
+	 * Sets the duration, in seconds, auth state should be stored.
+	 */
+	'session.state.timeout' => (60*60), // 1 hour
+
+	/*
+	 * Option to override the default settings for the session cookie name
+	 */
+	'session.cookie.name' => 'SimpleSAMLSessionID',
+
+	/*
+	 * Expiration time for the session cookie, in seconds.
+	 *
+	 * Defaults to 0, which means that the cookie expires when the browser is closed.
+	 *
+	 * Example:
+	 *  'session.cookie.lifetime' => 30*60,
+	 */
+	'session.cookie.lifetime' => 0,
+
+	/*
+	 * Limit the path of the cookies.
+	 *
+	 * Can be used to limit the path of the cookies to a specific subdirectory.
+	 *
+	 * Example:
+	 *  'session.cookie.path' => '/simplesaml/',
+	 */
+	'session.cookie.path' => '/',
+
+	/*
+	 * Cookie domain.
+	 *
+	 * Can be used to make the session cookie available to several domains.
+	 *
+	 * Example:
+	 *  'session.cookie.domain' => '.example.org',
+	 */
+	'session.cookie.domain' => NULL,
+
+	/*
+	 * Set the secure flag in the cookie.
+	 *
+	 * Set this to TRUE if the user only accesses your service
+	 * through https. If the user can access the service through
+	 * both http and https, this must be set to FALSE.
+	 */
+	'session.cookie.secure' => FALSE,
+
+	/*
+	 * When set to FALSE fallback to transient session on session initialization
+	 * failure, throw exception otherwise.
+	 */
+	'session.disable_fallback' => FALSE,
+
+	/*
+	 * Enable secure POST from HTTPS to HTTP.
+	 *
+	 * If you have some SP's on HTTP and IdP is normally on HTTPS, this option
+	 * enables secure POSTing to HTTP endpoint without warning from browser.
+	 *
+	 * For this to work, module.php/core/postredirect.php must be accessible
+	 * also via HTTP on IdP, e.g. if your IdP is on
+	 * https://idp.example.org/ssp/, then
+	 * http://idp.example.org/ssp/module.php/core/postredirect.php must be accessible.
+	 */
+	'enable.http_post' => FALSE,
+
+	/*
+	 * Options to override the default settings for php sessions.
+	 */
+	'session.phpsession.cookiename'  => null,
+	'session.phpsession.savepath'    => null,
+	'session.phpsession.httponly'    => FALSE,
+
+	/*
+	 * Option to override the default settings for the auth token cookie
+	 */
+	'session.authtoken.cookiename' => 'SimpleSAMLAuthToken',
+
+	/*
+	 * Languages available, RTL languages, and what language is default
+	 */
+	'language.available'	=> array('en', 'no', 'nn', 'se', 'da', 'de', 'sv', 'fi', 'es', 'fr', 'it', 'nl', 'lb', 'cs', 'sl', 'lt', 'hr', 'hu', 'pl', 'pt', 'pt-br', 'tr', 'ja', 'zh', 'zh-tw', 'ru', 'et', 'he', 'id', 'sr'),
+	'language.rtl'		=> array('ar','dv','fa','ur','he'),
+	'language.default'		=> 'cs',
+
+	/**
+	 * Custom getLanguage function called from SimpleSAML_XHTML_Template::getLanguage().
+	 * Function should return language code of one of the available languages or NULL.
+	 * See SimpleSAML_XHTML_Template::getLanguage() source code for more info.
+	 *
+	 * This option can be used to implement a custom function for determining
+	 * the default language for the user.
+	 *
+	 * Example:
+	 *   'language.get_language_function' => array('sspmod_example_Template', 'getLanguage'),
+	 */
+
+	/*
+	 * Extra dictionary for attribute names.
+	 * This can be used to define local attributes.
+	 *
+	 * The format of the parameter is a string with <module>:<dictionary>.
+	 *
+	 * Specifying this option will cause us to look for modules/<module>/dictionaries/<dictionary>.definition.json
+	 * The dictionary should look something like:
+	 *
+	 * {
+	 *     "firstattribute": {
+	 *         "en": "English name",
+	 *         "no": "Norwegian name"
+	 *     },
+	 *     "secondattribute": {
+	 *         "en": "English name",
+	 *         "no": "Norwegian name"
+	 *     }
+	 * }
+	 *
+	 * Note that all attribute names in the dictionary must in lowercase.
+	 *
+	 * Example: 'attributes.extradictionary' => 'ourmodule:ourattributes',
+	 */
+	'attributes.extradictionary' => NULL,
+
+	/*
+	 * Which theme directory should be used?
+	 */
+	'theme.use' 		=> 'default',
+
+	
+	/*
+	 * Default IdP for WS-Fed.
+	 */
+	'default-wsfed-idp'	=> 'urn:federation:pingfederate:localhost',
+
+	/*
+	 * Whether the discovery service should allow the user to save his choice of IdP.
+	 */
+	'idpdisco.enableremember' => TRUE,
+	'idpdisco.rememberchecked' => TRUE,
+	
+	// Disco service only accepts entities it knows.
+	'idpdisco.validate' => TRUE,
+	
+	'idpdisco.extDiscoveryStorage' => NULL, 
+
+	/*
+	 * IdP Discovery service look configuration. 
+	 * Wether to display a list of idp or to display a dropdown box. For many IdP' a dropdown box  
+	 * gives the best use experience.
+	 * 
+	 * When using dropdown box a cookie is used to highlight the previously chosen IdP in the dropdown.  
+	 * This makes it easier for the user to choose the IdP
+	 * 
+	 * Options: [links,dropdown]
+	 * 
+	 */
+	'idpdisco.layout' => 'dropdown',
+
+	/*
+	 * Whether simpleSAMLphp should sign the response or the assertion in SAML 1.1 authentication
+	 * responses.
+	 *
+	 * The default is to sign the assertion element, but that can be overridden by setting this
+	 * option to TRUE. It can also be overridden on a pr. SP basis by adding an option with the
+	 * same name to the metadata of the SP.
+	 */
+	'shib13.signresponse' => TRUE,
+	
+	
+	
+	/*
+	 * Authentication processing filters that will be executed for all IdPs
+	 * Both Shibboleth and SAML 2.0
+	 */
+	'authproc.idp' => array(
+		/* Enable the authproc filter below to add URN Prefixces to all attributes
+ 		10 => array(
+ 			'class' => 'core:AttributeMap', 'addurnprefix'
+ 		), */
+ 		/* Enable the authproc filter below to automatically generated eduPersonTargetedID. 
+ 		20 => 'core:TargetedID',
+ 		*/
+
+		// Adopts language from attribute to use in UI
+ 		30 => 'core:LanguageAdaptor',
+ 		
+		/* Add a realm attribute from edupersonprincipalname
+		40 => 'core:AttributeRealm',
+		 */
+		45 => array(
+			'class' => 'core:StatisticsWithAttribute',
+			'attributename' => 'realm',
+			'type' => 'saml20-idp-SSO',
+		),
+
+		/* When called without parameters, it will fallback to filter attributes ‹the old way›
+		 * by checking the 'attributes' parameter in metadata on IdP hosted and SP remote.
+		 */
+		50 => 'core:AttributeLimit', 
+
+		/* 
+		 * Search attribute "distinguishedName" for pattern and replaces if found
+
+		60 => array(
+			'class'		=> 'core:AttributeAlter',
+			'pattern'	=> '/OU=studerende/',
+			'replacement'	=> 'Student',
+			'subject'	=> 'distinguishedName',
+			'%replace',	
+		),
+		 */
+
+		/*
+		 * Consent module is enabled (with no permanent storage, using cookies).
+
+		90 => array(
+			'class' 	=> 'consent:Consent', 
+			'store' 	=> 'consent:Cookie', 
+			'focus' 	=> 'yes', 
+			'checked' 	=> TRUE
+		),
+		 */
+		// If language is set in Consent module it will be added as an attribute.
+ 		99 => 'core:LanguageAdaptor',
+	),
+	/*
+	 * Authentication processing filters that will be executed for all SPs
+	 * Both Shibboleth and SAML 2.0
+	 */
+	'authproc.sp' => array(
+		/*
+		10 => array(
+			'class' => 'core:AttributeMap', 'removeurnprefix'
+		),
+		*/
+    55 => array('class' => 'core:AttributeMap', 'oid2name'),
+
+		/*
+		 * Generate the 'group' attribute populated from other variables, including eduPersonAffiliation.
+		 */
+ 		60 => array('class' => 'core:GenerateGroups', 'eduPersonAffiliation'),
+ 		// All users will be members of 'users' and 'members' 	
+ 		61 => array('class' => 'core:AttributeAdd', 'groups' => array('users', 'members')),
+ 		
+		// Adopts language from attribute to use in UI
+ 		90 => 'core:LanguageAdaptor',
+
+	),
+	
+
+	/*
+	 * This option configures the metadata sources. The metadata sources is given as an array with
+	 * different metadata sources. When searching for metadata, simpleSAMPphp will search through
+	 * the array from start to end.
+	 *
+	 * Each element in the array is an associative array which configures the metadata source.
+	 * The type of the metadata source is given by the 'type' element. For each type we have
+	 * different configuration options.
+	 *
+	 * Flat file metadata handler:
+	 * - 'type': This is always 'flatfile'.
+	 * - 'directory': The directory we will load the metadata files from. The default value for
+	 *                this option is the value of the 'metadatadir' configuration option, or
+	 *                'metadata/' if that option is unset.
+	 *
+	 * XML metadata handler:
+	 * This metadata handler parses an XML file with either an EntityDescriptor element or an
+	 * EntitiesDescriptor element. The XML file may be stored locally, or (for debugging) on a remote
+	 * web server.
+	 * The XML hetadata handler defines the following options:
+	 * - 'type': This is always 'xml'.
+	 * - 'file': Path to the XML file with the metadata.
+	 * - 'url': The url to fetch metadata from. THIS IS ONLY FOR DEBUGGING - THERE IS NO CACHING OF THE RESPONSE.
+	 *
+	 *
+	 * Examples:
+	 *
+	 * This example defines two flatfile sources. One is the default metadata directory, the other
+	 * is a metadata directory with autogenerated metadata files.
+	 *
+	 * 'metadata.sources' => array(
+	 *     array('type' => 'flatfile'),
+	 *     array('type' => 'flatfile', 'directory' => 'metadata-generated'),
+	 *     ),
+	 *
+	 * This example defines a flatfile source and an XML source.
+	 * 'metadata.sources' => array(
+	 *     array('type' => 'flatfile'),
+	 *     array('type' => 'xml', 'file' => 'idp.example.org-idpMeta.xml'),
+	 *     ),
+	 *
+	 *
+	 * Default:
+	 * 'metadata.sources' => array(
+	 *     array('type' => 'flatfile')
+	 *     ),
+	 */
+	'metadata.sources' => array(
+		array('type' => 'flatfile'),
+		array('type' => 'flatfile', 'directory' => '/www/tul/metadata'),
+	),
+
+
+	/*
+	 * Configure the datastore for simpleSAMLphp.
+	 *
+	 * - 'phpsession': Limited datastore, which uses the PHP session.
+	 * - 'memcache': Key-value datastore, based on memcache.
+	 * - 'sql': SQL datastore, using PDO.
+	 *
+	 * The default datastore is 'phpsession'.
+	 *
+	 * (This option replaces the old 'session.handler'-option.)
+	 */
+	'store.type' => 'phpsession',
+
+
+	/*
+	 * The DSN the sql datastore should connect to.
+	 *
+	 * See http://www.php.net/manual/en/pdo.drivers.php for the various
+	 * syntaxes.
+	 */
+	'store.sql.dsn' => 'sqlite:/path/to/sqlitedatabase.sq3',
+
+	/*
+	 * The username and password to use when connecting to the database.
+	 */
+	'store.sql.username' => NULL,
+	'store.sql.password' => NULL,
+
+	/*
+	 * The prefix we should use on our tables.
+	 */
+	'store.sql.prefix' => 'simpleSAMLphp',
+
+
+	/*
+	 * Configuration for the MemcacheStore class. This allows you to store
+	 * multiple redudant copies of sessions on different memcache servers.
+	 *
+	 * 'memcache_store.servers' is an array of server groups. Every data
+	 * item will be mirrored in every server group.
+	 *
+	 * Each server group is an array of servers. The data items will be
+	 * load-balanced between all servers in each server group.
+	 *
+	 * Each server is an array of parameters for the server. The following
+	 * options are available:
+	 *  - 'hostname': This is the hostname or ip address where the
+	 *    memcache server runs. This is the only required option.
+	 *  - 'port': This is the port number of the memcache server. If this
+	 *    option isn't set, then we will use the 'memcache.default_port'
+	 *    ini setting. This is 11211 by default.
+	 *  - 'weight': This sets the weight of this server in this server
+	 *    group. http://php.net/manual/en/function.Memcache-addServer.php
+	 *    contains more information about the weight option.
+	 *  - 'timeout': The timeout for this server. By default, the timeout
+	 *    is 3 seconds.
+	 *
+	 * Example of redudant configuration with load balancing:
+	 * This configuration makes it possible to lose both servers in the
+	 * a-group or both servers in the b-group without losing any sessions.
+	 * Note that sessions will be lost if one server is lost from both the
+	 * a-group and the b-group.
+	 *
+	 * 'memcache_store.servers' => array(
+	 *     array(
+	 *         array('hostname' => 'mc_a1'),
+	 *         array('hostname' => 'mc_a2'),
+	 *     ),
+	 *     array(
+	 *         array('hostname' => 'mc_b1'),
+	 *         array('hostname' => 'mc_b2'),
+	 *     ),
+	 * ),
+	 *
+	 * Example of simple configuration with only one memcache server,
+	 * running on the same computer as the web server:
+	 * Note that all sessions will be lost if the memcache server crashes.
+	 *
+	 * 'memcache_store.servers' => array(
+	 *     array(
+	 *         array('hostname' => 'localhost'),
+	 *     ),
+	 * ),
+	 *
+	 */
+	'memcache_store.servers' => array(
+		array(
+			array('hostname' => 'localhost'),
+		),
+	),
+
+
+	/*
+	 * This value is the duration data should be stored in memcache. Data
+	 * will be dropped from the memcache servers when this time expires.
+	 * The time will be reset every time the data is written to the
+	 * memcache servers.
+	 *
+	 * This value should always be larger than the 'session.duration'
+	 * option. Not doing this may result in the session being deleted from
+	 * the memcache servers while it is still in use.
+	 *
+	 * Set this value to 0 if you don't want data to expire.
+	 *
+	 * Note: The oldest data will always be deleted if the memcache server
+	 * runs out of storage space.
+	 */
+	'memcache_store.expires' =>  36 * (60*60), // 36 hours.
+
+
+	/*
+	 * Should signing of generated metadata be enabled by default.
+	 *
+	 * Metadata signing can also be enabled for a individual SP or IdP by setting the
+	 * same option in the metadata for the SP or IdP.
+	 */
+	'metadata.sign.enable' => FALSE,
+
+	/*
+	 * The default key & certificate which should be used to sign generated metadata. These
+	 * are files stored in the cert dir.
+	 * These values can be overridden by the options with the same names in the SP or
+	 * IdP metadata.
+	 *
+	 * If these aren't specified here or in the metadata for the SP or IdP, then
+	 * the 'certificate' and 'privatekey' option in the metadata will be used.
+	 * if those aren't set, signing of metadata will fail.
+	 */
+	'metadata.sign.privatekey' => NULL,
+	'metadata.sign.privatekey_pass' => NULL,
+	'metadata.sign.certificate' => NULL,
+
+
+	/*
+	 * Proxy to use for retrieving URLs.
+	 *
+	 * Example:
+	 *   'proxy' => 'tcp://proxy.example.com:5100'
+	 */
+	'proxy' => NULL,
+
+);
diff --git a/config/ldap.php b/config/ldap.php
new file mode 100644
index 0000000..192278e
--- /dev/null
+++ b/config/ldap.php
@@ -0,0 +1,46 @@
+<?php
+/* 
+ * Configuration for the LDAP authentication module.
+ * 
+ * $Id: $
+ */
+
+$config = array (
+
+	/**
+	 * LDAP configuration. This is only relevant if you use the LDAP authentication plugin.
+	 *
+	 * The attributes parameter is a list of attributes that should be retrieved.
+	 * If the attributes parameter is set to null, all attributes will be retrieved.
+	 */
+	'auth.ldap.dnpattern'  => 'uid=%username%,dc=feide,dc=no,ou=feide,dc=uninett,dc=no',
+	'auth.ldap.hostname'   => 'ldap.uninett.no',
+	'auth.ldap.attributes' => null,
+	'auth.ldap.enable_tls' => false,
+	
+	/*
+	 * Searching the DN of the user.
+	 */
+
+	/* Set this to TRUE to enable searching. */
+	'auth.ldap.search.enable' => FALSE,
+
+	/* The base DN for the search. */
+	'auth.ldap.search.base' => NULL,
+
+	/* The attribute(s) to search for.
+	 *
+	 * This may be a single string, or an array of string. If this is an array, then any of the attributes
+	 * in the array may match the value the user supplied as the username.
+	 */
+	'auth.ldap.search.attributes' => NULL,
+
+	/* The username & password the simpleSAMLphp should bind as before searching. If this is left
+	 * as NULL, no bind will be performed before searching.
+	 */
+	'auth.ldap.search.username' => NULL,
+	'auth.ldap.search.password' => NULL,
+
+);
+
+?>
diff --git a/config/ldapmulti.php b/config/ldapmulti.php
new file mode 100644
index 0000000..f8210b4
--- /dev/null
+++ b/config/ldapmulti.php
@@ -0,0 +1,34 @@
+<?php
+
+/* 
+ * Configuration for the multi-DN LDAP authentication module.
+ * 
+ * $Id$
+ */
+
+$ldapmulti = array (
+
+	'feide.no' => array(
+		'description'		=> 'Feide',
+		/* for a description of options see equivalent options in ldap.php starting with auth.ldap. */
+		'dnpattern'			=> 'uid=%username%,dc=feide,dc=no,ou=feide,dc=uninett,dc=no',
+		'hostname'			=> 'ldap.uninett.no',
+		'attributes'		=> NULL,
+		'enable_tls'		=> FALSE,
+		'search.enable'		=> FALSE,
+		'search.base'		=> NULL,
+		'search.attributes'	=> NULL,
+		'search.username'	=> NULL,
+		'search.password'	=> NULL,
+	),
+
+	'uninett.no' => array(
+		'description'		=> 'UNINETT',
+		'dnpattern'			=> 'uid=%username%,ou=people,dc=uninett,dc=no',
+		'hostname'			=> 'ldap.uninett.no',
+		'attributes'		=> NULL,
+	)
+	
+);
+
+?>
diff --git a/config/module_cron.php b/config/module_cron.php
new file mode 100644
index 0000000..50e7c09
--- /dev/null
+++ b/config/module_cron.php
@@ -0,0 +1,16 @@
+<?php
+/* 
+ * Configuration for the Cron module.
+ * 
+ * $Id: $
+ */
+
+$config = array (
+
+	'key' => '99u6mmrys6weojsu8gnxg0t4exna89av',
+	'allowed_tags' => array('daily', 'hourly', 'frequent'),
+	'debug_message' => TRUE,
+	'sendemail' => FALSE,
+);
+
+?>
diff --git a/config/translation.php b/config/translation.php
new file mode 100644
index 0000000..2d360b2
--- /dev/null
+++ b/config/translation.php
@@ -0,0 +1,17 @@
+<?php
+/* 
+ * Configuration 
+ * 
+ * $Id$
+ */
+
+$config = array (
+
+	'application' => 'simplesamlphp',
+	'baseurl' => 'https://translation.rnd.feide.no/simplesaml',
+	'key' => '_e7224d54cda84434e25ef087e5c22c1fa5f6ae87cc',
+	'secret' => '_0e29f782d295bc9782112981f654f1db58174d19d7',
+
+);
+
+?>
diff --git a/modules/cron/enable b/modules/cron/enable
new file mode 100644
index 0000000..e69de29
diff --git a/modules/metarefresh/enable b/modules/metarefresh/enable
new file mode 100644
index 0000000..e69de29
diff --git a/www/.htaccess b/www/.htaccess
new file mode 100644
index 0000000..9b8684c
--- /dev/null
+++ b/www/.htaccess
@@ -0,0 +1 @@
+Allow from All
\ No newline at end of file
